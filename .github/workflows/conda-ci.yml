name: CI Workflow

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

jobs:

  check-style:
    name: 'Check Style'
    runs-on: ubuntu-24.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y perl
    - name: Check Style
      run: |
        perl tests/misc/check_style.pl

  check-license:
    name: 'Check License'
    runs-on: ubuntu-24.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y perl
    - name: Check License
      run: |
        perl tests/misc/check_license.pl

  check-tests:
    name: 'Check Devices Tests'
    runs-on: ubuntu-24.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y python3
    - name: Check Devices Tests
      run: |
        python3 tests/misc/check_tests.py

  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}@conda]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-latest, macos-latest, windows-2019]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge
        miniforge-version: latest

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        mamba install cmake compilers make ninja pkg-config
        # Actual dependencies
        mamba install -c conda-forge -c robostack-staging ycm-cmake-modules eigen ace sqlite

    - name: Download YARP [Linux,Windows,macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu') || contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        ls
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp
        ls

    - name: Build Yarp [Linux,macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        ls
        echo ${GITHUB_WORKSPACE}
        ls
        cd ${GITHUB_WORKSPACE}
        cd yarp
        mkdir build
        cd build
        cmake -GNinja .. \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DYARP_COMPILE_TESTS:BOOL=ON \
                      -DYARP_COMPILE_ALL_FAKE_DEVICES:BOOL=ON
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        echo "YARP_DATA_DIRS=${CONDA_PREFIX}/share/yarp::${YARP_DATA_DIRS}" >> $GITHUB_ENV

    - name: Build Yarp [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        ls
        echo ${GITHUB_WORKSPACE}
        ls
        cd ${GITHUB_WORKSPACE}
        ls
        cd yarp
        ls
        mkdir build
        cd build
        cmake -G"Visual Studio 16 2019" .. \
                                        -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}/Library \
                                        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                                        -DYARP_COMPILE_TESTS:BOOL=ON \
                                        -DYARP_COMPILE_ALL_FAKE_DEVICES:BOOL=ON
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        echo "YARP_DATA_DIRS=${CONDA_PREFIX}/Library/share/yarp;${YARP_DATA_DIRS}" >> $GITHUB_ENV

    - name: Dependencies (whispercpp) from source [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/ggerganov/whisper.cpp whispercpp
        cd whispercpp
        mkdir build
        cd build
        cmake -GNinja .. \
                      -DBUILD_SHARED_LIBS:BOOL=OFF \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}/whispercpp_InstallDir
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install .

    - name: Dependencies (whispercpp) from source [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/ggerganov/whisper.cpp whispercpp
        cd whispercpp
        mkdir build
        cd build
        cmake -G"Visual Studio 16 2019" .. \
                                        -DBUILD_SHARED_LIBS:BOOL=OFF \
                                        -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}/whispercpp_InstallDir
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install .

    - name: Configure yarp device [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        mkdir build
        cd build
        cmake -GNinja .. \
                      -DWHISPER_ROOT=${CONDA_PREFIX}/whispercpp_InstallDir \
                      -DBUILD_TESTING:BOOL=ON \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DYARP_COMPILE_TESTS:BOOL=ON

    - name: Configure yarp device [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        mkdir build
        cd build
        cmake -G"Visual Studio 16 2019" .. \
                                        -DWHISPER_ROOT=${CONDA_PREFIX}/whispercpp_InstallDir \
                                        -DBUILD_TESTING:BOOL=ON \
                                        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                                        -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX}\Library \
                                        -DYARP_COMPILE_TESTS:BOOL=ON

    - name: Build yarp device[Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        cd build
        cmake --install . --config ${{ matrix.build_type }}
        #install the models
        wget -P ${GITHUB_WORKSPACE}/build/share/yarp/contexts/whisperTranscribe_demo https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-base.en.bin

    - name: Test [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}

    - name: Build yarp device [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}
        #install the models
        curl  -L -o ggml-base.en.bin https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-base.en.bin
        #-p to create all the parent dirs
        #mkdir -p ${GITHUB_WORKSPACE}/build/share/WhisperTranscribe/contexts/whisperTranscribe_demo
        #mkdir -p ${GITHUB_WORKSPACE}/build/share/yarp/contexts/whisperTranscribe_demo
        mv ggml-base.en.bin ${GITHUB_WORKSPACE}/build/share/yarp/contexts/whisperTranscribe_demo

    - name: Test [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}

  build-valgrind:
    name: 'valgrind [ubuntu-latest@Debug@humble@conda]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [Debug]
        os: [ubuntu-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge
        miniforge-version: latest

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        mamba install cmake compilers make ninja pkg-config
        # Actual dependencies
        sudo apt-get install -qq -y libc6-dbg
        mamba install -c conda-forge -c robostack-staging ycm-cmake-modules eigen valgrind ace sqlite

    - name: Download YARP [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      run: |
        cd ${GITHUB_WORKSPACE}
        git clone https://github.com/robotology/yarp

    - name: Dependencies from source [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd ${GITHUB_WORKSPACE}
        cd yarp
        mkdir build
        cd build
        cmake -GNinja .. \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DYARP_COMPILE_TESTS:BOOL=ON \
                      -DYARP_COMPILE_ALL_FAKE_DEVICES:BOOL=ON \
                      -DYARP_VALGRIND_TESTS:BOOL=ON
        cmake --build . --config ${{ matrix.build_type }}
        cmake --install . --config ${{ matrix.build_type }}
        echo "YARP_DATA_DIRS=${CONDA_PREFIX}/share/yarp::${YARP_DATA_DIRS}" >> $GITHUB_ENV

    - name: Configure [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -GNinja .. \
                      -DBUILD_TESTING:BOOL=ON \
                      -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DYARP_VALGRIND_TESTS:BOOL=ON \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} \
                      -DYARP_COMPILE_TESTS:BOOL=ON

    - name: Build [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}

    - name: Test [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}
